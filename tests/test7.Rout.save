
R version 2.7.1 (2008-06-23)
Copyright (C) 2008 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # test handling of paths for which we observe
> # covariates but not state
> 
> # Based on and validated against src/simulate/test02.R
> 
> library("mspath")
> 
> 
> ## sort of like Manager_test.cc::manager2 test
> 
> # Data_samples.cc::pData1c
> data1c <- data.frame(ssn=c(4, 4, 5, 10, 10, 10),
+                     time=c(2.3, 2.4, 2, 0, 0.1, 0.5),
+                     fib=1+c(0, 1, 0, 0, 1, 2),
+                     x1=c( .3, .3, 0, -1, -2, -1),
+                     x2=c( 0, 2.1, 2.2, 2.3, 2.4, 2.7))
> baseline <- data1c[data1c$ssn==10,]
> baseline
  ssn time fib x1  x2
4  10  0.0   1 -1 2.3
5  10  0.1   2 -2 2.4
6  10  0.5   3 -1 2.7
> 
> # pModel2(.025) =  Model(pSpec2(), pSpec3(), pathComputers0(initialTime))
> # pSpec2
> spec2 <- matrix(c(0, 1, 1,
+                   1, 0, 1,
+                   0, 0, 0), byrow=TRUE, nrow=3)
> # makeSumLinearProduct2
> # (makeConstantProduct3(&n));
> #   pIntercept3
> spec2.inits.intercept <- c( 0.9, -10.0, 0.2, -7.0)
> 
> 
> 
> # (makeDataProduct2(&n));
> #   pSlope4
> spec2.inits.slope <- c(10.1,  5.3,  8.1, -2.3,
+                      2.4, -5.0, -2.1,  4.0)
> 
> # (makePathProduct3(&n));
> #  picks out the first path-dependent var
> #  pSlope5
> spec2.inits.path <- c(-11, 8.4, 5.5, 15.3)
> 
> # pSpec3
> spec3 <- matrix(c( 0, 1, 0,
+                   1, 0, 0,
+                   0, 0, 0), byrow=TRUE, nrow=3)
> # makeConstantProduct4
> #  pIntercept4
> spec3.inits <- c(-1.8, -0.8)
> 
> compute <- function(data) {
+   mspath(fib~time, misc=TRUE, ematrix=spec3, qmatrix=spec2,
+                 covariates= ~ x1+x2,
+                           # misccovariates aren't used, so no need to constrain
+                 pathvars= c("TIS"),
+                 pathoffset= .025,
+                 inits=c(spec2.inits.intercept, spec2.inits.slope,
+                   spec2.inits.path, spec3.inits),
+                 subject=ssn,
+                 data=data, stepnumerator=1, stepdenominator=10, initprobs=c(1.0, 0, 0, 0, 0),
+                 do.what=1, fixedpars=seq(4*4+2),
+                 isexact=TRUE)
+ }
> 
> ## adding cov-only obs in first interval has no effect
> d1 <- rbind(baseline[1,],
+             c(10, 0.02, 0, 100, 100),
+             baseline[2:3,]
+             )
> d1
  ssn time fib  x1    x2
4  10 0.00   1  -1   2.3
2  10 0.02   0 100 100.0
5  10 0.10   2  -2   2.4
6  10 0.50   3  -1   2.7
> compute(d1)
Optimization does not seem to have been tried
38.13536 = -2*log-likehood for 1 id's.
16 good paths with 47 good nodes and 47 bad nodes. 
If each path were evaluated separately, there would be 96 good nodes.
Warning messages:
1: In mspath.remove.overlap(subject, time, state, final.rows, stepnumerator,  :
  1 observations dropped because of multiple observations at the same rounded time.
2: In mspath(fib ~ time, misc = TRUE, ematrix = spec3, qmatrix = spec2,  :
  1 record dropped due to missing values
> # 38.13536 = -2LL
> 
> ## adding cov-only in otherwise emtpy interval has effect
> d2 <- rbind(baseline[1:2,],
+             c(10, 0.4, 0, 3, -1),
+             baseline[3,]
+             )
> d2
  ssn time fib x1   x2
4  10  0.0   1 -1  2.3
5  10  0.1   2 -2  2.4
3  10  0.4   0  3 -1.0
6  10  0.5   3 -1  2.7
> compute(d2)
Optimization does not seem to have been tried
3.909034 = -2*log-likehood for 1 id's.
16 good paths with 47 good nodes and 47 bad nodes. 
If each path were evaluated separately, there would be 96 good nodes.
> # 3.909034
> 
> 
> ## observations with state preferred over those without
> ## after 1st interval
> d3 <- rbind(baseline[1:2,],
+             c(10, 0.4, 0, 100, 100),
+             c(10, 0.43, 2, -100, -100),
+             c(10, 0.44, 0, 200, 200),
+             baseline[3,]
+             )
> d3
   ssn time fib   x1     x2
4   10 0.00   1   -1    2.3
5   10 0.10   2   -2    2.4
3   10 0.40   0  100  100.0
41  10 0.43   2 -100 -100.0
51  10 0.44   0  200  200.0
6   10 0.50   3   -1    2.7
> compute(d3)
Optimization does not seem to have been tried
36.67572 = -2*log-likehood for 1 id's.
16 good paths with 47 good nodes and 47 bad nodes. 
If each path were evaluated separately, there would be 96 good nodes.
Warning messages:
1: In mspath.remove.overlap(subject, time, state, final.rows, stepnumerator,  :
  2 observations dropped because of multiple observations at the same rounded time.
2: In mspath(fib ~ time, misc = TRUE, ematrix = spec3, qmatrix = spec2,  :
  2 records dropped due to missing values
> # 36.67572
> 
> 
> ## use last of unobserved in an interval without observed
> d3b <- rbind(baseline[1:2,],
+             c(10, 0.4, 0, 100, 100),
+             c(10, 0.44, 0, -10, 50),
+             baseline[3,]
+             )
> d3b
   ssn time fib  x1    x2
4   10 0.00   1  -1   2.3
5   10 0.10   2  -2   2.4
3   10 0.40   0 100 100.0
41  10 0.44   0 -10  50.0
6   10 0.50   3  -1   2.7
> compute(d3b)
Optimization does not seem to have been tried
3.909016 = -2*log-likehood for 1 id's.
16 good paths with 47 good nodes and 47 bad nodes. 
If each path were evaluated separately, there would be 96 good nodes.
Warning messages:
1: In mspath.remove.overlap(subject, time, state, final.rows, stepnumerator,  :
  1 observations dropped because of multiple observations at the same rounded time.
2: In mspath(fib ~ time, misc = TRUE, ematrix = spec3, qmatrix = spec2,  :
  1 record dropped due to missing values
> # 3.909016
> 
> 
> # use last observed
> d3c <- rbind(d3[1:5,],
+              c(10, 0.442, 1, 3, -3),
+              c(10, 0.443, 0, 5, 2),
+              baseline[3,]
+              )
> d3c
   ssn  time fib   x1     x2
4   10 0.000   1   -1    2.3
5   10 0.100   2   -2    2.4
3   10 0.400   0  100  100.0
41  10 0.430   2 -100 -100.0
51  10 0.440   0  200  200.0
6   10 0.442   1    3   -3.0
7   10 0.443   0    5    2.0
61  10 0.500   3   -1    2.7
> compute(d3c)
Optimization does not seem to have been tried
12.74073 = -2*log-likehood for 1 id's.
16 good paths with 47 good nodes and 47 bad nodes. 
If each path were evaluated separately, there would be 96 good nodes.
Warning messages:
1: In mspath.remove.overlap(subject, time, state, final.rows, stepnumerator,  :
  4 observations dropped because of multiple observations at the same rounded time.
2: In mspath(fib ~ time, misc = TRUE, ematrix = spec3, qmatrix = spec2,  :
  4 records dropped due to missing values
> # 12.74073
> 
> ## multiple cov-only observations in different intervals
> d4 <- baseline
> d4$time <- 2.9
> d4 <- rbind(baseline[1:2, ],
+             c(10, 0.4, 0, 2, 4),
+             c(10, 0.5, 0, 0, 1),
+             baseline[3,]
+             )
> d4
   ssn time fib x1  x2
4   10  0.0   1 -1 2.3
5   10  0.1   2 -2 2.4
3   10  0.4   0  2 4.0
41  10  0.5   0  0 1.0
6   10  0.5   3 -1 2.7
> compute(d4)
Optimization does not seem to have been tried
3.909016 = -2*log-likehood for 1 id's.
16 good paths with 47 good nodes and 47 bad nodes. 
If each path were evaluated separately, there would be 96 good nodes.
Warning messages:
1: In mspath.remove.overlap(subject, time, state, final.rows, stepnumerator,  :
  1 observations dropped because of multiple observations at the same rounded time.
2: In mspath(fib ~ time, misc = TRUE, ematrix = spec3, qmatrix = spec2,  :
  1 record dropped due to missing values
> # 3.909016
> 
> ## adding missing data that matches our assumptions without it has no effect
> d5 <- baseline[c(1, 2, 2, 2, 3),]
> d5$time[3:4] <- c(0.3, 0.4)
> d5$fib[3:4] <- 0
> d5
    ssn time fib x1  x2
4    10  0.0   1 -1 2.3
5    10  0.1   2 -2 2.4
5.1  10  0.3   0 -2 2.4
5.2  10  0.4   0 -2 2.4
6    10  0.5   3 -1 2.7
> compute(d5)
Optimization does not seem to have been tried
38.13536 = -2*log-likehood for 1 id's.
16 good paths with 47 good nodes and 47 bad nodes. 
If each path were evaluated separately, there would be 96 good nodes.
> # 38.13536 = -2LL
> 
